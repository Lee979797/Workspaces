/**
 */
package com.ninemax.jpa.code.action;

import com.ninemax.jpa.code.bus.TCflxBus;
import com.ninemax.jpa.code.model.*;
import com.ninemax.jpa.global.InitSysParams;
import com.ninemax.jpa.system.model.User;
import com.ninemax.jpa.util.ActionUtils;
import com.ninemax.jpa.util.BeanUtilsEx;
import com.ninemax.jpa.util.DateUtil;
import com.ninemax.nacao.util.clsStringTool;
import com.sun.org.apache.bcel.internal.generic.RETURN;

import javax.persistence.EntityManager;

import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author yanzh
 */
public class CertificatePrintAction extends CommonJgdmAction {
    private static final String path = "/product/jsp/certPrint/";
    private String prompt;
    private String checkCfjl;
    private Date startDate;
    private Date endDate;
    private Certi certi;
    //处罚记录
    private Map<String, String> cflxs;
    protected List<TCfjlb> cfjlbList = null;
    private TCfjlb cfjl;
    private String sqlwhere;
    private String order;
    private User user;

    private Map<String,String> orgs;
    private String orgMes;
    private List<NoticeLog>  notList;
    public CertificatePrintAction() {
    }

    public String search() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                excutec();
            }
        }.template();
    }

    private void excutec() {
        certi = new Certi();
        if ("1".equals(source)) {
            title = "发证 &gt;&gt; 证书打印 &gt;&gt; 代码证书打印查询";
            currentPath = "/bsweb/certificatePrint_list_no_print";
            setSource("zb_info");
            certi.setType("0");
        } else if ("2".equals(source)) {
            title = "发证 &gt;&gt; 证书打印 &gt;&gt; 校对单打印";
            currentPath = path + "search.jsp";
            setSource("verify_invoice");
        } else if ("3".equals(source)) {
            title = "发证 &gt;&gt; 证书打印 &gt;&gt; 打印证书副本";
            setPrompt("注：当证书挂失后，需要补发时，不可由此打印，可以用“代码证书打印”菜单打印。");
            currentPath = path + "search.jsp";
            certi.setType("3");
            setSource("fb_info");
        } else if ("4".equals(source)) {
            title = "发证 &gt;&gt; 证书打印 &gt;&gt; 打印证书副本";
            currentPath = path + "search.jsp";
            setSource("simple_verify_invoice");
            //_url = "fb_info.jsp";
        } else if ("5".equals(source)) {
            title = "发证 &gt;&gt; 证书打印 &gt;&gt; 特殊证书打印";
            currentPath = path + "search.jsp";
            setPrompt("该功能仅用于正常打印证书时没有打印出证书时使用，信息保持跟原来一致！");
            setSource("special_info");
            certi.setType("5");
        } else if ("6".equals(source)) {
            title = "发证 &gt;&gt; 证书打印 &gt;&gt; 申报表打印";
            currentPath = path + "search.jsp";
            setSource("apply_info");
            certi.setType("6");
        }
    }

    public String verify_invoice() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                em.clear();
                jgdm = dm;
                title = "发证 &gt;&gt; 证书打印 &gt;&gt; 校对单打印";
                currentPath = path + "verify_invoice.jsp";
            }
        }.template();
    }

    /**
     * 校对表简表
     *
     * @return
     */
    public String simple_verify_invoice() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                em.clear();
                jgdm = dm;
                title = "发证 &gt;&gt; 证书打印 &gt;&gt; 校对单简表打印";
                currentPath = path + "simple_verify_invoice.jsp";
            }
        }.template();
    }

    /**
     * 显示打印的机构信息，特殊
     *
     * @return
     */
    public String special_info() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                if (chufa(em)) {
                    source = "certificatePrint_special_info";
                    return;
                }
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                em.clear();
//机构代码表
                if (dm == null) {
                    setSource("5");
                    excutec();
                    return;
                } else {

                    jgdm = dm;
                    if (!user.getUserName().contains("admin") && !jgdm.getBzjgdm().equals(user.getBzjgdm())) {
                        setMessage("机构代码(" + jgdm.getJgdm() + ")不属于本办证机构管辖，请到（" + InitSysParams.zrxzqhMap.get(jgdm.getBzjgdm()) + "）处办理业务!");
                        setSource("5");
                        excutec();
                        return;
                    }
                    if (!"1".equals(jgdm.getDybz())) {
                        setMessage("机构代码(" + jgdm.getJgdm() + ")没有打印过，不需要使用特殊打印!");
                        setSource("5");
                        excutec();
                        return;
                    }
                    Boolean kcdybz = InitSysParams.system.getKcdybz();
                    if (kcdybz) {
                        if (jgdm.getZbsl() == null || jgdm.getZbsl() == 0) {
                            jgdm.setZbsl(1);
                            em.merge(jgdm);
                            em.clear();
                        }
                        if (jgdm.getZbsl() > 0) {
                            List<TZssl> zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='0'").getResultList();
                            if (zssls == null || zssls.isEmpty() || zssls.get(0).getKcsl() <= 0) {
                                setMessage("正本库存已经耗尽,补充正本后方可操作!");
                                setSource("5");
                                excutec();
                                return;
                            }
                        }
                    }
                }
                List<TZs> zses3 = em.createQuery("select model from TZs model where model.jgdm='" + jgdm.getJgdm() + "' and model.zstype='1' and model.flag='1' order by model.lsh desc").getResultList();
                Set<Integer> hfbs = new HashSet<Integer>();
                if (zses3 != null && !zses3.isEmpty()) {
                    for (TZs zs : zses3) {
                        String sn = zs.getDjh().trim().substring(17);
                        if (sn != null && !"".equals(sn.trim()))
                            hfbs.add(Integer.valueOf(sn.trim()));
                    }
                }
                Integer[] ifbs = new Integer[hfbs.size()];
                certi.setFbs(hfbs.toArray(ifbs));
                em.clear();
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 特殊证书打印");
                currentPath = path + "special_info.jsp";
            }
        }.template();
    }


    /**
     * 申报表打印
     *
     * @return
     */
    public String apply_info() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                TJgdm dm = null;
                if (jgdm != null && jgdm.getJgdm() != null && jgdm.getJgdm().trim().length() == 9)
                    dm = em.find(TJgdm.class, jgdm.getJgdm());
                else if (jgdm != null && jgdm.getJgdm() != null && jgdm.getJgdm().trim().length() > 0) {
                    TJgdmSave save = em.find(TJgdmSave.class, Integer.valueOf(jgdm.getJgdm().trim()));
                    dm = new TJgdm();
                    BeanUtilsEx.copyProperties(dm, save);
                    dm.setLastdate(save.getBzrq());
                }
                em.clear();
                //机构代码表
                if (dm == null) {
                    setSource("6");
                    excutec();
                    return;
                } else {
                    jgdm = dm;
                    if (!user.getUserName().contains("admin") && !jgdm.getBzjgdm().equals(user.getBzjgdm())) {
                        setMessage("机构代码(" + jgdm.getJgdm() + ")不属于本办证机构管辖，请到（" + InitSysParams.zrxzqhMap.get(jgdm.getBzjgdm()) + "）处办理业务!");
                        setSource("6");
                        excutec();
                        return;
                    }
                }
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 申报表打印");
                currentPath = path + "apply_info.jsp";
            }
        }.nSyTemplate();
    }

    public String zb_info() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                TJgdm dm;
                if (ywlc != null) {
                    ywlc = em.find(TYwlc.class, ywlc.getYwlsh());
                    dm = em.find(TJgdm.class, ywlc.getJgdm());
                } else {
                    dm = em.find(TJgdm.class, jgdm.getJgdm());
                }
                em.clear();
//机构代码表
                if (dm == null) {
                    setSource("1");
                    excutec();
                    return;
                } else {
                    jgdm = dm;
                    if (!user.getUserName().contains("admin") && !jgdm.getBzjgdm().equals(user.getBzjgdm())) {
                        setMessage("机构代码(" + jgdm.getJgdm() + ")不属于本办证机构管辖，请到（" + InitSysParams.zrxzqhMap.get(jgdm.getBzjgdm()) + "）处办理业务!");
                        setSource("1");
                        excutec();
                        return;
                    }
                    //如果打印标志为0，属于新办处罚，如果需要处罚，跳到新办处罚页面
                    if ("0".equals(dm.getDybz())) {
                        if (newChuFa(em)) {
                            return;
                        }
                    }
                    if (chufa(em)) {
                        source = "certificatePrint_zb_info";
                        return;
                    }
                    if ("1".equals(jgdm.getDybz())) {
                        setMessage("机构代码(" + jgdm.getJgdm() + ")已经打印，无法再打印!");
                        setSource("1");
                        excutec();
                        return;
                    }
                    Boolean kcdybz = InitSysParams.system.getKcdybz();
                    if (kcdybz) {
                        if (jgdm.getZbsl() == null || jgdm.getZbsl() == 0) {
                            jgdm.setZbsl(1);
                            em.merge(jgdm);
                            em.clear();
                        }
                        if (jgdm.getZbsl() > 0) {
                            List<TZssl> zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='0'").getResultList();
                            if (zssls == null || zssls.isEmpty() || zssls.get(0).getKcsl() - jgdm.getZbsl() < 0) {
                                setMessage("正本库存已经耗尽,补充正本后方可操作!");
                                setSource("1");
                                excutec();
                                return;
                            }
                        }
                    }
                }

                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 代码证书打印信息");
                currentPath = path + "zb_info.jsp";
            }
        }.nSyTemplate();
    }

    public String fb_info() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                if (chufa(em)) {
                    source = "certificatePrint_fb_info";
                    return;
                }
                setSource("3");
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                em.clear();
                if (dm == null) {
                    excutec();
                    return;
                } else {
                    jgdm = dm;
                    if (!"1".equals(jgdm.getDybz())) {
                        setMessage("机构代码(" + jgdm.getJgdm() + ")还未打印，无法补打印!");
                        /*excutec(em);*/
                        currentPath = "/bsweb/certificatePrint_list_has_print";
                        return;
                    }
                    if (!user.getUserName().contains("admin") && !jgdm.getBzjgdm().equals(user.getBzjgdm())) {
                        setMessage("机构代码(" + jgdm.getJgdm() + ")不属于本办证机构管辖，请到（" + InitSysParams.zrxzqhMap.get(jgdm.getBzjgdm()) + "）处办理业务!");
                        /*excutec(em);*/
                        currentPath = "/bsweb/certificatePrint_list_has_print";
                        return;
                    }

                    Boolean kcdybz = InitSysParams.system.getKcdybz();
                    if (kcdybz) {
                        if (jgdm.getFbsl() == null || jgdm.getFbsl() == 0) {
                            jgdm.setFbsl(1);
                            em.merge(jgdm);
                            em.clear();
                        }
                        if (jgdm.getFbsl() > 0) {
                            List<TZssl> zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='0'").getResultList();
                            if (zssls == null || zssls.isEmpty() || zssls.get(0).getKcsl() <= 0) {
                                setMessage("副本库存已经耗尽,补充副本后方可操作!");
                                /*excutec(em);*/
                                currentPath = "/bsweb/certificatePrint_list_has_print";
                                return;
                            }
                        }

                    }
                }

                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 代码证书副本打印信息");
                currentPath = path + "fb_info.jsp";
            }
        }.nSyTemplate();
    }

    /**
     * 代码特殊打印 显示
     *
     * @return
     */
    public String special_print() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                if (certi == null) {
                    certi = new Certi();
                } else if ("1".equals(certi.getType())) {
                    List<TZs> zses3 = em.createQuery("select model from TZs model where model.jgdm='" + jgdm.getJgdm() + "' and model.zstype='1' order by model.lsh desc").getResultList();
                    Set<Integer> hfbs = new HashSet<Integer>();
                    if (zses3 != null && !zses3.isEmpty()) {
                        for (TZs zs : zses3) {
                            String sn = zs.getDjh().trim().substring(17);
                            if (sn != null && !"".equals(sn.trim()))
                                hfbs.add(Integer.valueOf(sn.trim()));
                        }
                    }
                    if (certi.getDjh() == null || "".equals(certi.getDjh().trim())) {
                        Integer[] ifbs = new Integer[hfbs.size()];
                        certi.setFbs(hfbs.toArray(ifbs));
                    } else {
                        String[] sFbs = certi.getDjh().split(",");
                        Set<Integer> fbs = new HashSet<Integer>();
                        for (String fb : sFbs) {
                            if (fb == null || "".equals(fb.trim()))
                                continue;
                            Integer num = Integer.valueOf(fb.trim());
                            if (hfbs.contains(num))
                                fbs.add(num);
                        }
                        Integer[] ifbs = new Integer[fbs.size()];
                        certi.setFbs(fbs.toArray(ifbs));
                    }

                }
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                em.clear();
                jgdm = dm;

                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm().trim());

                String yxq = DateUtil.dateToStr(dm.getBzrq(), "自yyyy年MM月dd日") + DateUtil.dateToStr(dm.getZfrq(), "至yyyy年MM月dd日");
                String strZstg0 = "";
                if (zrxzqh.getNjtsbz() != null && zrxzqh.getNjtsbz()) {
                    if ("0".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年相关证照年检后,于" + DateUtil.dateToStr(dm.getNjqx()) + "前接受年度验证;";
                    }
                    if ("1".equals(zrxzqh.getNjfs())) {

                        strZstg0 = "请于每年" + zrxzqh.getNjqsrq().substring(0, 2) + "月" + zrxzqh.getNjqsrq().substring(2, 4) + "日至" + zrxzqh.getNjjzrq().substring(0, 2) + "月" + zrxzqh.getNjjzrq().substring(2, 4) + "日前接受年度验证;";
                    }
                }
                String strZstg2 = zrxzqh.getZstg2();
                if (jgdm.getNjqx() == null)
                    throw new Exception("机构代码（" + jgdm.getJgdm() + ")年检时间设置有误，请联系管理员");
                String njqx = DateUtil.dateToStr(jgdm.getNjqx());
                if (strZstg2 != null) {
                    strZstg2 = strZstg2.replaceAll("%", String.valueOf(DateUtil.getMonth(njqx)));
                    strZstg2 = strZstg2.replaceAll("&", String.valueOf(DateUtil.getDay(njqx)));
                } else
                    strZstg2 = "";
                certi.setFrdbMc(frmc(jgdm.getJglx() == null ? "" : jgdm.getJglx()));
                certi.setFrdbValue(jgdm.getFddbr());
                certi.setJgdm(jgdm.getJgdm());
                certi.setJgmc(jgdm.getJgmc());
                certi.setJglx(jgdm.getJglx());
                certi.setBzjgdm(jgdm.getBzjgdm());
                certi.setJgdz(jgdm.getJgdz());
                certi.setYxq(yxq);
                certi.setDjh(jgdm.getZslsh());
                certi.setQRCode(jgdm.getJgdm() + ";" + jgdm.getJgmc() + ";" + jgdm.getJgdz());
                certi.setTsxx1(strZstg0);
                certi.setTsxx2(zrxzqh.getZstg1());
                certi.setTsxx3(strZstg2);
                orgMes=InitSysParams.getInstance().orgs.get(jgdm.getJglx());
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 代码证书特殊打印");
                currentPath = path + "special_print.jsp";
            }
        }.nSyTemplate();
    }

    /**
     * fb 1
     *
     * @return
     */
    public String fb_print() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                if (certi == null) {
                    certi = new Certi();
                }
                User user = (User) session.get("sysUser");
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                dm.setZslsh(jgdm.getZslsh());
                em.merge(dm);
                em.flush();


                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm().trim());
                if (dm.getBzrq() == null || dm.getZfrq() == null) {
                    throw new Exception("机构代码（" + jgdm.getJgdm() + ")时间设置有误，请联系管理员");
                }
                String yxq = DateUtil.dateToStr(dm.getBzrq(), "自yyyy年MM月dd日") + DateUtil.dateToStr(dm.getZfrq(), "至yyyy年MM月dd日");
                String strZstg0 = "";
                if (zrxzqh.getNjtsbz() != null && zrxzqh.getNjtsbz()) {
                    if ("0".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年相关证照年检后,于" + DateUtil.dateToStr(dm.getNjqx()) + "前接受年度验证;";
                    }
                    if ("1".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年" + zrxzqh.getNjqsrq().substring(0, 2) + "月" + zrxzqh.getNjqsrq().substring(2, 4) + "日至" + zrxzqh.getNjjzrq().substring(0, 2) + "月" + zrxzqh.getNjjzrq().substring(2, 4) + "日前接受年度验证;";
                    }
                }
                String strZstg2 = zrxzqh.getZstg2();
                if (dm.getNjqx() == null)
                    throw new Exception("机构代码（" + jgdm.getJgdm() + ")年检时间设置有误，请联系管理员");
                String njqx = DateUtil.dateToStr(dm.getNjqx());
                if (strZstg2 != null) {
                    strZstg2 = strZstg2.replaceAll("%", String.valueOf(DateUtil.getMonth(njqx)));
                    strZstg2 = strZstg2.replaceAll("&", String.valueOf(DateUtil.getDay(njqx)));
                } else
                    strZstg2 = "";
                certi.setFrdbMc(frmc(dm.getJglx() == null ? "" : dm.getJglx()));
                certi.setFrdbValue(dm.getFddbr());
                certi.setJgdm(dm.getJgdm());
                certi.setQRCode(dm.getJgdm() + ";" + dm.getJgmc() + ";" + dm.getJgdz());
                certi.setJgmc(dm.getJgmc());
                certi.setJglx(dm.getJglx());
                certi.setBzjgdm(dm.getBzjgdm());
                certi.setJgdz(dm.getJgdz());
                certi.setFbNumber(jgdm.getFbsl());
                certi.setType("2");
                certi.setYxq(yxq);
                certi.setDjh(dm.getZslsh());
                certi.setTsxx1(strZstg0);
                certi.setTsxx2(zrxzqh.getZstg1());
                certi.setTsxx3(strZstg2);
                orgMes=InitSysParams.getInstance().orgs.get(jgdm.getJglx());
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 代码证书打印");
                currentPath = path + "fb_print.jsp";
            }
        }.nSyTemplate();
    }

    public String zb_print() {
        return new ActionUtils(session) {
            @Override
            protected synchronized void excute() throws Exception {
                User user = (User) session.get("sysUser");
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());

                if (certi == null) {
                    certi = new Certi();
                }
                if ("4".equals(dm.getDybz().trim()) || "0".equals(dm.getDybz().trim()) || "2".equals(dm.getDybz().trim())) {

                    SerialPK pk = new SerialPK();
                    pk.setTableType("5");
                    pk.setXzqhCode(user.getBzjgdm());
                    Serial serial = em.find(Serial.class, pk);
                    em.clear();
                    String lsh = "";
                    int len = 6;
                    if (serial != null) {
                        lsh = serial.getFlowId().toString();
                    } else {
                        serial = new Serial();
                        serial.setFlowId(0);
                        serial.setFlowIdLen("6");
                        serial.setTableType("5");
                        serial.setXzqhCode(user.getBzjgdm());
                        serial.setYear("" + Calendar.getInstance().get(Calendar.YEAR));
                        em.merge(serial);
                        em.flush();
                    }
                    if (lsh.length() < len) {
                        len = len - lsh.length();
                        for (int i = 0; i < len; i++) {
                            lsh = "0" + lsh;
                        }
                    }
                    dm.setZslsh(lsh);
                    em.merge(dm);
                    em.flush();
                }
                em.clear();
                jgdm = dm;
                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm().trim());
                String yxq = DateUtil.dateToStr(dm.getBzrq(), "自yyyy年MM月dd日") + DateUtil.dateToStr(dm.getZfrq(), "至yyyy年MM月dd日");
                String strZstg0 = "";
                if (zrxzqh.getNjtsbz() != null && zrxzqh.getNjtsbz()) {
                    if ("0".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年相关证照年检后,于" + DateUtil.dateToStr(dm.getNjqx()) + "前接受年度验证;";
                    }
                    if ("1".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年" + zrxzqh.getNjqsrq().substring(0, 2) + "月" + zrxzqh.getNjqsrq().substring(2, 4) + "日至" + zrxzqh.getNjjzrq().substring(0, 2) + "月" + zrxzqh.getNjjzrq().substring(2, 4) + "日前接受年度验证;";
                    }
                }
                String strZstg2 = zrxzqh.getZstg2();
                if (jgdm.getNjqx() == null)
                    throw new Exception("机构代码（" + jgdm.getJgdm() + ")年检时间设置有误，请联系管理员");
                String njqx = DateUtil.dateToStr(jgdm.getNjqx());
                if (strZstg2 != null) {
                    strZstg2 = strZstg2.replaceAll("%", String.valueOf(DateUtil.getMonth(njqx)));
                    strZstg2 = strZstg2.replaceAll("&", String.valueOf(DateUtil.getDay(njqx)));
                } else
                    strZstg2 = "";
                certi.setFrdbMc(frmc(jgdm.getJglx()));
                certi.setFrdbValue(jgdm.getFddbr());
                certi.setJgdm(jgdm.getJgdm());
                certi.setJgmc(jgdm.getJgmc());
                certi.setJglx(jgdm.getJglx());
                certi.setBzjgdm(jgdm.getBzjgdm());
                certi.setJgdz(jgdm.getJgdz());
                certi.setFbNumber(dm.getFbsl());
                certi.setZbNumber(dm.getZbsl());
                certi.setYxq(yxq);
                certi.setDjh(jgdm.getZslsh());
                certi.setTsxx1(strZstg0);
                certi.setTsxx2(zrxzqh.getZstg1());
                certi.setTsxx3(strZstg2);
                orgMes=InitSysParams.getInstance().orgs.get(jgdm.getJglx());
                certi.setQRCode(jgdm.getJgdm() + ";" + jgdm.getJgmc() + ";" + jgdm.getJgdz());
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 代码证书打印");
                currentPath = path + "zb_print.jsp";
            }
        }.template();
    }

    /**
     * 证书打印测试
     *
     * @return
     */
    public String print_test() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                if (certi == null) {
                    certi = new Certi();
                }
                certi.setFrdbMc(frmc("1"));
                certi.setFrdbValue("张法人");
                certi.setJgdm("00000000");
                certi.setJgmc("测试数据机构名称");
                certi.setJglx("1");
                certi.setBzjgdm(user.getBzjgdm());
                certi.setJgdz("测试数据机构地址");
                certi.setYxq("自" + DateUtil.dateToStr(new Date(), "yyyy年MM月dd日") + "至" + DateUtil.dateToStr(new Date(), "yyyy年MM月dd日"));
                certi.setDjh("组代管" + user.getBzjgdm() + "-0000000");
                certi.setQRCode("00000000;测试数据机构名称;测试数据机构地址");
                certi.setTsxx1("测试数据证书提示信息一");
                certi.setTsxx2("测试数据证书提示信息二");
                certi.setTsxx3("测试数据证书提示信息三");
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 证书打印测试");
                currentPath = path + "print_test.jsp";
            }
        }.nSyTemplate();
    }

    /**
     * 证书特殊打印
     *
     * @return
     */
    public String print_set() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                if (user == null) {
                    user = (User) session.get("sysUser");
                    user = em.find(User.class, user.getUserId());
                    em.clear();
                } else {
                    User user1 = em.find(User.class, user.getUserId());
                    user1.setOffsetx(user.getOffsetx());
                    user1.setOffsety(user.getOffsety());
                    user1.setPrintName(user.getPrintName());
                    em.merge(user1);
                    em.flush();
                    user = user1;
                    session.put("sysUser", user);
                    setMessage("证书打印设置成功！");
                }
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 证书打印设置");
                currentPath = path + "print_set.jsp";
            }
        }.nSyTemplate();
    }

    /**
     * 证书特殊打印
     *
     * @return String
     */
    public String print_special() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                em.clear();
                String lsh = dm.getZslsh();
                int fbsl;
                if (certi == null) {
                    certi = new Certi();
                }
                String yxq = DateUtil.dateToStr(dm.getBzrq(), "自yyyy年MM月dd日") + DateUtil.dateToStr(dm.getZfrq(), "至yyyy年MM月dd日");
                certi.setDjhZb(lsh);
                dm.setZbsl(1);
                fbsl = dm.getFbsl();

                TCzjl czjl = new TCzjl();
                czjl.setJgdm(jgdm.getJgdm());
                czjl.setMemo("正本数量：" + ("0".equals(certi.getType()) ? 1 : 0) + "，副本数量：" + fbsl + "'");
                czjl.setName(user.getUserName());
                czjl.setType("M");
                czjl.setDate(new Date());
                czjl.setXzqh(user.getBzjgdm());
                em.persist(czjl);
                em.flush();
                System.out.println("type = " + certi.getType());
                if ("0".equals(certi.getType())) {
                    czjl = new TCzjl();
                    czjl.setJgdm(jgdm.getJgdm());
                    czjl.setMemo("特殊打印正本");
                    czjl.setName(user.getUserName());
                    czjl.setType("M3");
                    czjl.setDate(new Date());
                    czjl.setXzqh(user.getBzjgdm());
                    em.persist(czjl);
                    em.flush();
                } else {
                    for (int i = 0; i < fbsl; i++) {
                        czjl = new TCzjl();
                        czjl.setJgdm(jgdm.getJgdm());
                        czjl.setMemo("特殊打印副本");
                        czjl.setName(user.getUserName());
                        czjl.setType("M4");
                        czjl.setDate(new Date());
                        czjl.setXzqh(user.getBzjgdm());
                        em.persist(czjl);
                        em.flush();
                    }
                }

                em.createQuery("delete from TMdktemp where jgdm='" + jgdm.getJgdm() + "'").executeUpdate();
                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm().trim());
                String strZstg0 = "";
                if (zrxzqh.getNjtsbz() != null && zrxzqh.getNjtsbz()) {
                    if ("0".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年相关证照年检后,于" + DateUtil.dateToStr(dm.getNjqx()) + "前接受年度验证;";
                    }
                    if ("1".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年" + zrxzqh.getNjqsrq().substring(0, 2) + "月" + zrxzqh.getNjqsrq().substring(2, 4) + "日至" + zrxzqh.getNjjzrq().substring(0, 2) + "月" + zrxzqh.getNjjzrq().substring(2, 4) + "日前接受年度验证;";
                    }
                }
                String strZstg2 = zrxzqh.getZstg2();
                if (dm.getNjqx() == null)
                    throw new Exception("机构代码（" + jgdm.getJgdm() + ")年检时间设置有误，请联系管理员");
                String njqx = DateUtil.dateToStr(dm.getNjqx());
                if (strZstg2 != null) {
                    strZstg2 = strZstg2.replaceAll("%", String.valueOf(DateUtil.getMonth(njqx)));
                    strZstg2 = strZstg2.replaceAll("&", String.valueOf(DateUtil.getDay(njqx)));
                } else
                    strZstg2 = "";
                certi.setFrdbMc(frmc(jgdm.getJglx() == null ? "" : jgdm.getJglx()));
                certi.setFrdbValue(jgdm.getFddbr());
                certi.setDjhFb(lsh + "-");
                certi.setFbNumber(fbsl);
                certi.setJgdm(jgdm.getJgdm());
                certi.setJgmc(jgdm.getJgmc());
                certi.setJglx(jgdm.getJglx());
                certi.setBzjgdm(jgdm.getBzjgdm());
                certi.setJgdz(jgdm.getJgdz());
                certi.setYxq(yxq);
                certi.setDjh(certi.getDjhZb());
                certi.setTsxx1(strZstg0);
                certi.setTsxx2(zrxzqh.getZstg1());
                certi.setTsxx3(strZstg2);
                certi.setQRCode(jgdm.getJgdm() + ";" + jgdm.getJgmc() + ";" + jgdm.getJgdz());
                setTitle("证书打印");
                setSource("search?source=5");
                setMessage("特殊证书打印完成，证书表面信息和最后一次正常打印时信息一致！");
                currentPath = path + "success.jsp";
            }
        }.template();
    }

    /**
     * 证书打印   2
     *
     * @return
     */
    public String print_fb() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                if (certi == null) {
                    certi = new Certi();
                }
                User user = (User) session.get("sysUser");
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                em.clear();
                certi.setDjhFbPre(dm.getZslsh() + "-");
                certi.setDjhZb(dm.getZslsh());
                String yxq = DateUtil.dateToStr(dm.getBzrq(), "自yyyy年MM月dd日") + DateUtil.dateToStr(dm.getZfrq(), "至yyyy年MM月dd日");

                List<TZs> zses3 = em.createQuery("select model from TZs model where model.jgdm='" + jgdm.getJgdm() + "' and model.zstype='1' order by model.lsh desc").getResultList();
                if (zses3 == null || zses3.isEmpty()) {
                    certi.setFbSn("0");
                } else {
                    certi.setFbSn(zses3.get(0).getDjh().trim().substring(17));
                }
                TZssl zssl;
                List<TZssl> zssls;
                if (jgdm.getFbsl() > 0) {
                    TZysh zysh = new TZysh();
                    zysh.setXzqh(user.getBzjgdm());
                    zysh.setJgdm(jgdm.getJgdm());
                    zysh.setType("1");
                    zysh.setShtype("1");
                    zysh.setShreason("打证");
                    zysh.setShsj(new Date());
                    zysh.setShsl(jgdm.getFbsl());
                    em.persist(zysh);
                    zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='1'").getResultList();
                    if (zssls == null || zssls.isEmpty()) {
                        throw new Exception("已经没有可用证书（副本）");
                    }
                    zssl = zssls.get(0);
                    em.createQuery("update TZssl set kcsl='" + (zssl.getKcsl() - jgdm.getFbsl()) + "' where xzqh='" + zssl.getXzqh() + "' and type='1'").executeUpdate();
                    zysh = new TZysh();
                    zysh.setXzqh(user.getBzjgdm());
                    zysh.setJgdm(jgdm.getJgdm());
                    zysh.setType("2");
                    zysh.setShtype("1");
                    zysh.setShreason("打证");
                    zysh.setShsj(new Date());
                    zysh.setShsl(jgdm.getFbsl());
                    em.persist(zysh);
                    zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='2'").getResultList();
                    if (zssls == null || zssls.isEmpty()) {
                        throw new Exception("已经没有可用证书（综述）");
                    }
                    zssl = zssls.get(0);
                    em.createQuery("update TZssl set kcsl='" + (zssl.getKcsl() - jgdm.getFbsl()) + "' where xzqh='" + zssl.getXzqh() + "' and type='1'").executeUpdate();
                }
                TCzjl czjl = new TCzjl();
                czjl.setJgdm(jgdm.getJgdm());
                czjl.setMemo("正本数量：" + jgdm.getZbsl() + "，副本数量：" + jgdm.getFbsl() + "'");
                czjl.setName(user.getUserName());
                czjl.setType("M");
                czjl.setDate(new Date());
                czjl.setXzqh(user.getBzjgdm());
                em.persist(czjl);
                em.flush();
                em.createQuery("delete from TMdktemp where jgdm='" + jgdm.getJgdm() + "'").executeUpdate();
                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm().trim());
                if (jgdm.getFbsl() > 0) {
                    for (int i = Integer.parseInt(certi.getFbSn()); i < Integer.parseInt(certi.getFbSn()) + jgdm.getFbsl(); i++) {
                        czjl = new TCzjl();
                        czjl.setJgdm(jgdm.getJgdm());
                        czjl.setMemo("打印副本");
                        czjl.setName(user.getUserName());
                        czjl.setType("M2");
                        czjl.setDate(new Date());
                        czjl.setXzqh(user.getBzjgdm());
                        em.persist(czjl);
                        em.flush();
                        TZs zs = new TZs();
                        BeanUtilsEx.copyProperties(zs, dm);
                        zs.setFlag("1");
                        zs.setFzr(user.getBzjgdm());
                        zs.setZstype("1");
                        zs.setZslsh(dm.getZslsh());
                        zs.setDjh("组代管" + user.getBzjgdm() + "-" + certi.getDjhFbPre() + (Integer.toString(i + 1)));
                        zs.setFzsj(new Date());
                        zs.setYxq(yxq);
                        zs.setBzjgdm(user.getBzjgdm());
                        zs.setBzjgmc(zrxzqh.getJgmc());
                        em.persist(zs);
                    }
                }
                em.flush();
                String strZstg0 = "";
                if (zrxzqh.getNjtsbz() != null && zrxzqh.getNjtsbz()) {
                    if ("0".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年相关证照年检后,于" + DateUtil.dateToStr(dm.getNjqx()) + "前接受年度验证;";
                    }
                    if ("1".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年" + zrxzqh.getNjqsrq().substring(0, 2) + "月" + zrxzqh.getNjqsrq().substring(2, 4) + "日至" + zrxzqh.getNjjzrq().substring(0, 2) + "月" + zrxzqh.getNjjzrq().substring(2, 4) + "日前接受年度验证;";
                    }
                }
                String strZstg2 = zrxzqh.getZstg2();
                if (dm.getNjqx() == null)
                    throw new Exception("机构代码（" + jgdm.getJgdm() + ")年检时间设置有误，请联系管理员");
                String njqx = DateUtil.dateToStr(dm.getNjqx());
                if (strZstg2 != null) {
                    strZstg2 = strZstg2.replaceAll("%", String.valueOf(DateUtil.getMonth(njqx)));
                    strZstg2 = strZstg2.replaceAll("&", String.valueOf(DateUtil.getDay(njqx)));
                } else
                    strZstg2 = "";
                dm.setFbsl(dm.getFbsl() + jgdm.getFbsl());

                certi.setFrdbMc(frmc(dm.getJglx() == null ? "" : dm.getJglx()));
                certi.setFrdbValue(dm.getFddbr());
                certi.setJgdm(dm.getJgdm());
                certi.setJgmc(dm.getJgmc());
                certi.setJglx(dm.getJglx());
                certi.setBzjgdm(dm.getBzjgdm());
                certi.setJgdz(dm.getJgdz());
                certi.setZbNumber(dm.getZbsl());
                certi.setFbNumber(jgdm.getFbsl());
                certi.setYxq(yxq);
                certi.setDjh(certi.getDjhFbPre() + (Integer.valueOf(certi.getFbSn()) + 1));
                certi.setTsxx1(strZstg0);
                certi.setTsxx2(zrxzqh.getZstg1());
                certi.setTsxx3(strZstg2);
                certi.setQRCode(dm.getJgdm() + ";" + dm.getJgmc() + ";" + dm.getJgdz());
                em.merge(dm);
                em.flush();
                jgdm = dm;
                setTitle("证书打印");
                currentPath = path + "fb_print_ok.jsp";

            }
        }.template();
    }

    /**
     * 证书打印
     *
     * @return
     */
    public String print_zb() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                TJgdm dm = em.find(TJgdm.class, jgdm.getJgdm());
                int zbsl = 0;
                int fbsl = 0;
                if (certi == null) {
                    certi = new Certi();
                }
                if ("4".equals(dm.getDybz().trim()) || "0".equals(dm.getDybz().trim()) || "2".equals(dm.getDybz().trim())) {

                    SerialPK pk = new SerialPK();
                    pk.setTableType("5");
                    pk.setXzqhCode(user.getBzjgdm());
                    Serial serial = em.find(Serial.class, pk);
                    em.clear();
                    String lsh = "";
                    int len = 6;
                    if (serial != null) {
                        lsh = serial.getFlowId().toString();
                        serial.setFlowId(serial.getFlowId() + 1);
                        em.merge(serial);
                        em.flush();
                    } else {
                        serial = new Serial();
                        serial.setFlowId(0);
                        serial.setFlowIdLen("6");
                        serial.setTableType("5");
                        serial.setXzqhCode(user.getBzjgdm());
                        serial.setYear("" + Calendar.getInstance().get(Calendar.YEAR));
                        em.persist(serial);
                        em.clear();
                    }
                    if (lsh.length() < len) {
                        len = len - lsh.length();
                        for (int i = 0; i < len; i++) {
                            lsh = "0" + lsh;
                        }
                    }
                    dm.setZslsh(lsh);
                    em.merge(dm);
                    em.flush();
                }
                String yxq = DateUtil.dateToStr(dm.getBzrq(), "自yyyy年MM月dd日") + DateUtil.dateToStr(dm.getZfrq(), "至yyyy年MM月dd日");
                certi.setDjhFbPre(dm.getZslsh() + "-");
                certi.setDjhZb(dm.getZslsh());
                if ("0".equals(dm.getDybz()) || "2".equals(dm.getDybz()) || "4".equals(dm.getDybz())) {
                    zbsl = 1;
                    dm.setZbsl(1);
                    fbsl = dm.getFbsl() == null ? 1 : dm.getFbsl();
                    certi.setFbSn("0");
                } else if ("3".equals(dm.getDybz())) {
                    //处理正本相关
                    List<TZs> zses = em.createQuery("select model from TZs model where model.jgdm='" + dm.getJgdm() + "' and model.zstype='0' and model.flag='5' order by model.lsh desc ").getResultList();
                    if (zses == null || zses.isEmpty()) {
                        zbsl = 0;
                    } else {
                        zses = em.createQuery("select model from TZs model where model.jgdm='" + dm.getJgdm() + "' and model.zstype='0' order by model.lsh desc ").getResultList();
                        zbsl = 1;
                        TZs zbzs = zses.get(0);
                        if (zbzs.getDjh().trim().length() == 16) {
                            certi.setDjhZb(dm.getZslsh() + "补1");
                        } else {
                            String zbsn = zbzs.getDjh().trim().substring(17);
                            zbsn = Integer.toString(Integer.parseInt(zbsn) + 1);
                            certi.setDjhZb(dm.getZslsh() + "补" + zbsn);
                        }
                    }
                    //处理副本相关
                    zses = em.createQuery("select model from TZs model where model.jgdm='" + dm.getJgdm() + "' and model.zstype='1' and model.flag='5' order by model.lsh desc ").getResultList();
                    if (zses == null || zses.isEmpty()) {
                        fbsl = 0;
                        certi.setFbSn("0");
                    } else {
                        fbsl = zses.size();
                        zses = em.createQuery("select model from TZs model where model.jgdm='" + dm.getJgdm() + "' and model.zstype='1' order by model.lsh desc ").getResultList();
                        TZs zbzs = zses.get(0);
                        certi.setFbSn(zbzs.getDjh().trim().substring(17));
                        certi.setDjhFbPre(zbzs.getZslsh() + "-");
                    }
                } else {
                    fbsl = dm.getFbsl() == null ? 1 : dm.getFbsl();
                    certi.setFbSn("0");
                }
                ywlc.setYwlsh(ywlc.getYwlsh());
                jgdm = dm;
                ywlclx = 12;
                type = "打印证书";
                dm.setDybz("1");
                dm.setLastdate(new Date());
                em.merge(dm);
                TZssl zssl;
                List<TZssl> zssls;
                if (zbsl > 0) {
                    TZysh zysh = new TZysh();
                    zysh.setXzqh(user.getBzjgdm());
                    zysh.setJgdm(jgdm.getJgdm());
                    zysh.setType("0");
                    zysh.setShtype("1");
                    zysh.setShreason("打证");
                    zysh.setShsj(new Date());
                    zysh.setShsl(zbsl);
                    em.persist(zysh);
                    zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='0'").getResultList();
                    if (zssls == null || zssls.isEmpty()) {
                        message = "已经没有可用证书(正本)";
                        currentPath = path + "zb_print.jsp";
                        return;
                    }
                    zssl = zssls.get(0);
                    em.createQuery("update TZssl set kcsl='" + (zssl.getKcsl() - zbsl) + "' where xzqh='" + zssl.getXzqh() + "' and type='0'").executeUpdate();

                }
                if (fbsl > 0) {
                    TZysh zysh = new TZysh();
                    zysh.setXzqh(user.getBzjgdm());
                    zysh.setJgdm(jgdm.getJgdm());
                    zysh.setType("1");
                    zysh.setShtype("1");
                    zysh.setShreason("打证");
                    zysh.setShsj(new Date());
                    zysh.setShsl(fbsl);
                    em.persist(zysh);
                    zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='1'").getResultList();
                    if (zssls == null || zssls.isEmpty()) {
                        message = "已经没有可用证书（副本）";
                        currentPath = path + "zb_print.jsp";
                        return;
                    }
                    zssl = zssls.get(0);
                    em.createQuery("update TZssl set kcsl='" + (zssl.getKcsl() - fbsl) + "' where xzqh='" + zssl.getXzqh() + "' and type='1'").executeUpdate();

                }
                int iFpsl = fbsl + zbsl;
                if (iFpsl > 0) {
                    TZysh zysh = new TZysh();
                    zysh.setXzqh(user.getBzjgdm());
                    zysh.setJgdm(jgdm.getJgdm());
                    zysh.setType("2");
                    zysh.setShtype("1");
                    zysh.setShreason("打证");
                    zysh.setShsj(new Date());
                    zysh.setShsl(iFpsl);
                    em.persist(zysh);
                    zssls = em.createQuery("select model from TZssl model where model.xzqh='" + user.getBzjgdm() + "' and model.type='2'").getResultList();
                    if (zssls == null || zssls.isEmpty()) {
                        message = "已经没有可用证书（综述）";
                        currentPath = path + "zb_print.jsp";
                        return;
                    }
                    zssl = zssls.get(0);
                    em.createQuery("update TZssl set kcsl='" + (zssl.getKcsl() - iFpsl) + "' where xzqh='" + zssl.getXzqh() + "' and type='1'").executeUpdate();

                }
                TCzjl czjl = new TCzjl();
                czjl.setJgdm(jgdm.getJgdm());
                czjl.setMemo("正本数量：" + zbsl + "，副本数量：" + fbsl + "'");
                czjl.setName(user.getUserName());
                czjl.setType("M");
                czjl.setDate(new Date());
                czjl.setXzqh(user.getBzjgdm());
                em.persist(czjl);
                em.createQuery("delete from TMdktemp where jgdm='" + jgdm.getJgdm() + "'").executeUpdate();
                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm());
                em.createQuery("UPDATE TZs SET flag='0',lastdate=:lastdate WHERE jgdm =:jgdm and flag>='2'")
                        .setParameter("lastdate", new Date()).setParameter("jgdm", jgdm.getJgdm()).executeUpdate();
                if (zbsl > 0) {
                    czjl = new TCzjl();
                    czjl.setJgdm(jgdm.getJgdm());
                    czjl.setMemo("打印正本");
                    czjl.setName(user.getUserName());
                    czjl.setType("M1");
                    czjl.setDate(new Date());
                    czjl.setXzqh(user.getBzjgdm());
                    em.persist(czjl);
                    em.flush();
                    TZs zs = new TZs();
                    BeanUtilsEx.copyProperties(zs, jgdm);
                    zs.setFlag("1");
                    zs.setFzr(user.getBzjgdm());
                    zs.setZstype("0");
                    zs.setZslsh(dm.getZslsh());
                    zs.setDjh("组代管" + user.getBzjgdm() + "-" + certi.getDjhZb());
                    zs.setFzsj(new Date());
                    zs.setYxq(yxq);
                    zs.setBzjgdm(user.getBzjgdm());
                    zs.setBzjgmc(zrxzqh.getJgmc());
                    em.persist(zs);
                }
                if (fbsl > 0) {
                    for (int i = Integer.parseInt(certi.getFbSn().trim()); i < Integer.parseInt(certi.getFbSn().trim()) + fbsl; i++) {
                        czjl = new TCzjl();
                        czjl.setJgdm(jgdm.getJgdm());
                        czjl.setMemo("打印副本");
                        czjl.setName(user.getUserName());
                        czjl.setType("M2");
                        czjl.setDate(new Date());
                        czjl.setXzqh(user.getBzjgdm());
                        em.persist(czjl);
                        em.flush();
                        TZs zs = new TZs();
                        BeanUtilsEx.copyProperties(zs, jgdm);
                        zs.setFlag("1");
                        zs.setFzr(user.getBzjgdm());
                        zs.setZstype("1");
                        zs.setZslsh(dm.getZslsh());
                        zs.setDjh("组代管" + user.getBzjgdm() + "-" + certi.getDjhFbPre() + (Integer.toString(i + 1)));
                        zs.setFzsj(new Date());
                        zs.setYxq(yxq);
                        zs.setBzjgdm(user.getBzjgdm());
                        zs.setBzjgmc(zrxzqh.getJgmc());
                        em.persist(zs);
                    }
                }
                em.flush();
                String strZstg0 = "";
                if (zrxzqh.getNjtsbz() != null && zrxzqh.getNjtsbz()) {
                    if ("0".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年相关证照年检后,于" + DateUtil.dateToStr(dm.getNjqx()) + "前接受年度验证;";
                    }
                    if ("1".equals(zrxzqh.getNjfs())) {
                        strZstg0 = "请于每年" + zrxzqh.getNjqsrq().substring(0, 2) + "月" + zrxzqh.getNjqsrq().substring(2, 4) + "日至" + zrxzqh.getNjjzrq().substring(0, 2) + "月" + zrxzqh.getNjjzrq().substring(2, 4) + "日前接受年度验证;";
                    }
                }
                String strZstg2 = zrxzqh.getZstg2();
                if (dm.getNjqx() == null)
                    throw new Exception("机构代码（" + jgdm.getJgdm() + ")年检时间设置有误，请联系管理员");
                String njqx = DateUtil.dateToStr(dm.getNjqx());
                if (strZstg2 != null) {
                    strZstg2 = strZstg2.replaceAll("%", String.valueOf(DateUtil.getMonth(njqx)));
                    strZstg2 = strZstg2.replaceAll("&", String.valueOf(DateUtil.getDay(njqx)));
                } else
                    strZstg2 = "";
                deleteSp(jgdm.getJgdm());
                certi.setJgdm(jgdm.getJgdm());
                certi.setFrdbMc(frmc(jgdm.getJglx() == null ? "" : jgdm.getJglx()));
                certi.setFrdbValue(jgdm.getFddbr());
                certi.setJgmc(jgdm.getJgmc());
                certi.setJglx(jgdm.getJglx());
                certi.setBzjgdm(jgdm.getBzjgdm());
                certi.setJgdz(jgdm.getJgdz());
                certi.setZbNumber(zbsl);
                certi.setFbNumber(fbsl);
                certi.setYxq(yxq);
                certi.setDjh(certi.getDjhZb());
                certi.setTsxx1(strZstg0);
                certi.setTsxx2(zrxzqh.getZstg1());
                certi.setTsxx3(strZstg2+InitSysParams.getInstance().orgs.get(jgdm.getJglx()));
                certi.setQRCode(jgdm.getJgdm() + ";" + jgdm.getJgmc() + ";" + jgdm.getJgdz());
                setTitle("证书打印");
                setSource("1");
                currentPath = path + "zb_print_ok.jsp";
            }

            private void deleteSp(String jgdm) {
                em.createQuery("delete from TSpdmtemp where lsh in (select model.gllsh from TSp model where model.jgdm=:jgdm and model.flag='1' and model.shflag <> '1')")
                        .setParameter("jgdm", jgdm).executeUpdate();
                em.createQuery("update  TSp model set model.flag='2' where model.jgdm=:jgdm and model.flag='1' and model.shflag <> '1'")
                        .setParameter("jgdm", jgdm).executeUpdate();
            }

        }.template();
    }


    public String list_prints() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm());
                if (jgdm == null) {
                    jgdm = new TJgdm();
                }

                if (page == null) {
                    page = new Page();
                    page.setOrderByField("lastdate");
                    page.setOrderByType("desc");
                }
                String orderBy = (page.getOrderByField() != null && !"".equals(page.getOrderByField())) ? (" order by model." + page.getOrderByField() + " " + page.getOrderByType()) : "";
                if (zrxzqh != null && "1".equals(zrxzqh.getFzflag())) {
                    String sql = " from TJgdm model where  " + sql() + "  and model.dybz <> '1' and model.jgdm not in (select model.jgdm from TSp model where  model.flag <> '2')";
                    if (jgdm.getJgdm() == null || "".equals(jgdm.getJgdm())) {
                        if (startDate != null) {
                            sql += " and model.lastdate >= '" + DateUtil.dateToStr(startDate) + "'  ";
                        }
                        if (endDate != null) {
                            sql += " and model.lastdate < '" + DateUtil.dateToStr(DateUtil.dayAfter(endDate, 1)) + "'  ";
                        }
                    }
                    else {
                        sql += " and model.jgdm like '%" + jgdm.getJgdm() + "%' ";
                    }
                    jgdms = em.createQuery("select model " + sql + orderBy)
                            .setFirstResult(page.getStartRecord()).setMaxResults(page.getPageSize())
                            .getResultList();
                    page.setTotalRecord(((Long) em.createQuery("select count(model)  " + sql)
                            .getResultList().get(0)).intValue());
                    if (jgdms == null || jgdms.isEmpty())
                        setMessage("当前办证区间内，不存在需要打证的机构！");

                } else {
                    setMessage("当前登录用户没有打证权限！");
                }
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 批量打印证书");
                currentPath = path + "list_prints.jsp";
            }
        }.nSyTemplate();
    }

    /**
     * 未打印数据检索
     *
     * @return String
     */
    public String list_no_print() {
        isYwlc = InitSysParams.system.getIsYwlc();
        if (isYwlc) {
            return new ActionUtils(session) {
                @Override
                protected void excute() throws Exception {
                    User user = (User) session.get("sysUser");
                    if (ywlc == null) {
                        ywlc = new TYwlc();
                    }
                    if (page == null) {
                        page = new Page();
                        page.setOrderByField("clsj");
                        page.setOrderByType("desc");
                    }
                    ywlc.setYwlclx(ywType);
                    ywlc.setType("打印证书");
                    ywlc.setBzjgdm(user.getBzjgdm());
                    String sql = " from TYwlc model,TYwlcDy dy ,TYwlcDy ywdy where model.isend='1' " +
                            " and model.ywlclx=dy.ywlclx and ywdy.ywlclx=dy.ywlclx and model.type=dy.type and dy.isend='1' and dy.lcsx = ywdy.lcsx-1 and ywdy.type='打印证书' " +
                            " and model.bzjgdm='" + user.getBzjgdm() +
                            "' and model.ywlsh like '%" + (ywlc.getYwlsh() == null ? "" : ywlc.getYwlsh())
                            + "%'   and model.jgdm like '" + "%" + (ywlc.getJgdm() == null ? "" : ywlc.getJgdm()) + "%'";

                    String orderBy = (page.getOrderByField() != null && !"".equals(page.getOrderByField())) ? (" order by model." + page.getOrderByField() + " " + page.getOrderByType()) : "";
                    ywlcs = em.createQuery("select model " + sql + orderBy)
                            .setFirstResult(page.getStartRecord()).setMaxResults(page.getPageSize())
                            .getResultList();
                    page.setTotalRecord(((Long) em.createQuery("select count(model) " + sql)
                            .getResultList().get(0)).intValue());
                    currentPath = path + "list_ywlc.jsp";
                }
            }.nSyTemplate();
        } else return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                TZrxzqh zrxzqh = InitSysParams.zrxzqhMap2.get(user.getBzjgdm());
                if (jgdm == null) {
                    jgdm = new TJgdm();
                }

                if (page == null) {
                    page = new Page();
                    page.setOrderByField("lastdate");
                    page.setOrderByType("desc");
                }
                String orderBy = (page.getOrderByField() != null && !"".equals(page.getOrderByField())) ? (" order by model." + page.getOrderByField() + " " + page.getOrderByType()) : "";
                if (zrxzqh != null && "1".equals(zrxzqh.getFzflag())) {
                    String sql = " from TJgdm model where  " + sql() + "  and model.dybz <> '1'";
                    if (jgdm.getJgdm() == null || "".equals(jgdm.getJgdm())) {
                        if (startDate != null) {
                            sql += " and model.lastdate >= '" + DateUtil.dateToStr(startDate) + "'  ";
                        }
                        if (endDate != null) {
                            sql += " and model.lastdate < '" + DateUtil.dateToStr(DateUtil.dayAfter(endDate, 1)) + "'  ";
                        }
                    } else {
                        sql += " and model.jgdm like '%" + jgdm.getJgdm() + "%' ";
                    }
                    jgdms = em.createQuery("select model " + sql + orderBy)
                            .setFirstResult(page.getStartRecord()).setMaxResults(page.getPageSize())
                            .getResultList();
                    page.setTotalRecord(((Long) em.createQuery("select count(model)  " + sql)
                            .getResultList().get(0)).intValue());
                    if (jgdms == null || jgdms.isEmpty())
                        setMessage("当前办证区间内，不存在需要打证的机构！");

                } else {
                    setMessage("当前登录用户没有打证权限！");
                }
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 代码证书打印");
                currentPath = path + "list_no_print.jsp";
            }
        }.nSyTemplate();
    }

    /**
     * 未打印数据检索
     */
    public String list_has_print() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                if (jgdm == null) {
                    jgdm = new TJgdm();
                }

                if (page == null) {
                    page = new Page();
                    page.setOrderByField("lastdate");
                    page.setOrderByType("desc");
                }
                String orderBy = (page.getOrderByField() != null && !"".equals(page.getOrderByField())) ? (" order by model." + page.getOrderByField() + " " + page.getOrderByType()) : "";
                String sql = " from TJgdm model where  " + sql() + "  and model.dybz='1'";
                if (jgdm.getJgdm() == null || "".equals(jgdm.getJgdm())) {
                    if (startDate != null) {
                        sql += " and model.lastdate >= '" + DateUtil.dateToStr(startDate) + "'  ";
                    }
                    if (endDate != null) {
                        sql += " and model.lastdate < '" + DateUtil.dateToStr(DateUtil.dayAfter(endDate, 1)) + "'  ";
                    }
                } else {
                    sql += " and model.jgdm like '%" + jgdm.getJgdm() + "%' ";
                }

                jgdms = em.createQuery("select model " + sql + orderBy)
                        .setFirstResult(page.getStartRecord()).setMaxResults(page.getPageSize())
                        .getResultList();
                page.setTotalRecord(((Long) em.createQuery("select count(model)  " + sql)
                        .getResultList().get(0)).intValue());
                setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 已打印证书查询");
                currentPath = path + "list_has_print.jsp";
            }
        }.nSyTemplate();
    }
    
    
   /**
    * 证书打印查询
    * @return
    */
    public String list_zscx_print(){
    	return new ActionUtils(session) {
    		@Override
            protected void excute() throws Exception {
                User user = (User) session.get("sysUser");
                if (tzs == null) {
                	tzs = new TZs();
                }
                if (page == null) {
                    page = new Page();
                    page.setOrderByField("yxq");
                    page.setOrderByType("desc");
                }
                String orderBy = (page.getOrderByField() != null && !"".equals(page.getOrderByField())) ? (" order by model." + page.getOrderByField() + " " + page.getOrderByType()) : "";
                String sql = " from TZs model where  " + sql() + "";
                if (tzs.getJgdm() != null || "".equals(tzs.getJgdm())) {
                	sql += " and model.jgdm like '%" + tzs.getJgdm() + "%' ";
                } 
                if (tzs.getJgmc() != null || "".equals(tzs.getJgmc())){
                	sql += " and model.jgmc like '%" + tzs.getJgmc() + "%' ";
                }
                tzss = em.createQuery("select model " + sql + orderBy)
                .setFirstResult(page.getStartRecord()).setMaxResults(page.getPageSize())
                .getResultList();
		        page.setTotalRecord(((Long) em.createQuery("select count(model)" + sql)
		                .getResultList().get(0)).intValue());
		        setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 打印证书查询");
		        currentPath = path + "list_zscx_print.jsp";
		        em.clear();
    		}
    	}.nSyTemplate();
    }
    
    /**
     * 证书统计查询
     * @return
     */
    public String list_zstj_print(){
    	return new ActionUtils(session) {
    		@Override
            protected void excute() throws Exception {
    			User user = (User) session.get("sysUser");
    			if (tcjl == null) {
    				tcjl = new TCzjl();
                }
                if (page == null) {
                    page = new Page();
                    page.setOrderByField("date");
                    page.setOrderByType("desc");
                }
                String sql = " from t_czjl model where model.type in('M','M1','M2','M3','M4') and " + sql() + "";
                if (tcjl.getJgdm() == null || "".equals(tcjl.getJgdm())) {
                	 if (startDate != null) {
                         sql += " and model.date >= '" + DateUtil.dateToStr(startDate) + "'  ";
                     }
                     if (endDate != null) {
                         sql += " and model.date < '" + DateUtil.dateToStr(DateUtil.dayAfter(endDate, 1)) + "'  ";
                     }
                }
                if (tcjl.getXzqh() != null || "".equals(tcjl.getXzqh())) {
					sql +=" and model.xzqh like '%" + tcjl.getXzqh() + "%'";
				}
                if (tcjl.getJgdm() != null || "".equals(tcjl.getJgdm())) {
                	sql += " and model.jgdm like '%" + tcjl.getJgdm() + "%' ";
				}
                List<Object []> czjls=   em.createNativeQuery ("select model.xzqh, " +
	                 		"sum(case model.type when'M' then 1 else 0 end) M," +
	                 		"sum(case model.type when'M1' then 1 else 0 end) M1," +
	                 		"sum(case model.type when'M2' then 1 else 0 end) M2," +
	                 		"sum(case model.type when'M3' then 1 else 0 end) M3," +
	                 		"sum(case model.type when'M4' then 1 else 0 end) M4 " + sql+" group by model.xzqh")
                .setFirstResult(page.getStartRecord()).setMaxResults(page.getPageSize())
                .getResultList();
                tCzjls = new ArrayList<TCzjl>();
                for(Object [] objs:czjls){
                	TCzjl czjl=new TCzjl();
            	   tCzjls.add(czjl);
            	   czjl.setKlsh(Long.parseLong(objs[0]+""));
            	   czjl.setJgdm(objs[1].toString());
            	   czjl.setType(objs[2].toString());
            	   czjl.setMemo(objs[3].toString());
            	   czjl.setName(objs[4].toString());
            	   czjl.setXzqh(objs[5].toString());
            	   
                }
		        page.setTotalRecord(((Integer) em.createNativeQuery("select count(1) from(select 1 as b" + sql +"group by model.xzqh"+")"+"as a")
		                .getResultList().get(0)).intValue());
		        setTitle("发证 &gt;&gt; 证书打印 &gt;&gt; 证书打印数量");
		        currentPath = path + "list_zstj_print.jsp";
		        em.clear();
    		}
    	}.nSyTemplate();
    }
    
    public String getSqlwhere() {
        return sqlwhere;
    }

    public void setSqlwhere(String sqlwhere) {
        this.sqlwhere = sqlwhere;
    }

    public String getOrder() {
        return order;
    }

    public void setOrder(String order) {
        this.order = order;
    }

    public String getCheckCfjl() {
        return checkCfjl;
    }

    public void setCheckCfjl(String checkCfjl) {
        this.checkCfjl = checkCfjl;
    }

    public List<TCfjlb> getCfjlbList() {
        return cfjlbList;
    }

    public void setCfjlbList(List<TCfjlb> cfjlbList) {
        this.cfjlbList = cfjlbList;
    }

    private String frmc(String jglx) {
        if ("1357C".contains(jglx))
            return "法定代表人";
        return "负责人";
    }

    protected boolean chufa(EntityManager em) {
        if (checkCfjl == null || !"no".equals(checkCfjl)) {
            cfjlbList = em.createQuery("select model from TCfjlb model where model.jgdm='" + jgdm.getJgdm() + "' and model.cfbz=false").getResultList();
            if (cfjlbList != null && !cfjlbList.isEmpty()) {
                source = "change_" + source;
                currentPath = path + "../common/cflb.jsp";
                return true;
            }
        }
        return false;
    }

    //新办处罚跳到处罚页面
    protected boolean newChuFa(EntityManager em) {
        cfjlbList = em.createQuery("select model from TCfjlb model where model.jgdm='" + jgdm.getJgdm() + "' and model.cfbz=false").getResultList();
        if (cfjlbList != null && !cfjlbList.isEmpty()) {
            cfjl = cfjlbList.get(0);
            cflxs = new TCflxBus().getMap();
            setTitle("处罚 &gt;&gt; 违规处罚管理 &gt;&gt; 违规处罚");
            currentPath = path + "../punish/punish.jsp";
            return true;
        }
        return false;
    }


    //添加机构类型打印控制
	public String add(){
		 return new ActionUtils() {

			@Override
			protected void excute() throws Exception {
				orgType.setId(1);
				//em.persist(orgType);
				em.merge(orgType);
				em.close();
				title="ok";
				InitSysParams.getInstance().orgs.clear();
				Map<String, String> map = new HashMap<String, String>();
				
				map.put("1", orgType.getOrg1());
	            map.put("2", orgType.getOrg2());
	            map.put("3", orgType.getOrg3());
	            map.put("4", orgType.getOrg4());
	            map.put("5", orgType.getOrg5());
	            map.put("6", orgType.getOrg6());
	            map.put("7", orgType.getOrg7());
	            map.put("8", orgType.getOrg8());
	            map.put("9", orgType.getOrg9());
	            map.put("A", orgType.getOrg10());
	            map.put("B", orgType.getOrg11());
	            map.put("C", orgType.getOrg12());
				InitSysParams.getInstance().orgs=map;
				
				currentPath =  "/product/jsp/certPrint/orgType.jsp";
				
			}
			 
		 }.nSyTemplate();
		
		
		
	}
	
	
	/**
	 * 通知结果显示
	 * @return
	 */
	public String notice(){
		
		 return new ActionUtils() {

			@Override
			protected void excute() throws Exception {
				String sql = " select model from TJgdm model   where 1=1" ;
				 if (selJgdm != null && !"".equals(selJgdm)) {
	                    sql += " and model.jgdm ='" + selJgdm + "'";
	                }
	                if (mc != null && !"".equals(mc)){
	                    sql += " and model.jgmc like '%" + mc + "%'";
	                }
				jgdms = em.createQuery(sql).getResultList();
		         
				orgMes="ok";
				if (jgdms != null && !jgdms.isEmpty()) {
		            jgdm = jgdms.get(0);
		       
		        	
		        List<NoticeLog> list = em.createQuery("select model from NoticeLog model  order by nid desc").getResultList();
		        
		    	if (list != null && !list.isEmpty()) {
		    		title = list.get(0).getId().toString();
		            
		    		title=clsStringTool.getLsh(title, "0", 7);
		        }else{
		        	title="0";
		        }
		        java.text.SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		        String date = sd.format(new Date());
		        //记录日志
		        User user = (User) session.get("sysUser");
		        Date newDate = new Date();
		        NoticeLog notLog=new NoticeLog();
		        notLog.setSelDw(jgdm.getJgmc());
		        notLog.setSelSer(title);
		        notLog.setSelPeople(user.getBzjgdm());
		        notLog.setSelTime(date);
		        em.merge(notLog);
		        em.close();	
		        }else{
		        	orgMes="no";
		        }
		    
		        
		        
		        currentPath = "/product/jsp/requisition/noticeSel.jsp";
			}
			
			 
		 }.template();
		 }
	/**
	 * 查询机构类型打印控制
	 */
	private OrgTypeMes orgType;
	public String sel(){
		 return new ActionUtils() {

				@Override
				protected void excute() throws Exception {
					//String nameQuery = "select model from TSp model where id='1'";

					//List<OrgTypeMes> list =  em.createQuery(nameQuery).getResultList();
					//orgType=list.get(0);
					orgType=em.find(OrgTypeMes.class, 1);
					currentPath =  "/product/jsp/certPrint/orgType.jsp";
				}
				 
			 }.template();
	}
	
	/**
	 * 通知日志查询
	 * @return
	 */
	public String notList() {
        return new ActionUtils(session) {
            @Override
            protected void excute() throws Exception {
            
                if (page == null) {
                    page = new Page();
                    page.setOrderByField("id");
                    page.setOrderByType("desc");

                }
                String orderBy = (page.getOrderByField() != null && !"".equals(page.getOrderByField())) ? (" order by model." + page.getOrderByField() + " " + page.getOrderByType()) : "";
                String sql = " from  NoticeLog model where 1=1" ;
                if (selJgdm != null && !"".equals(selJgdm)) {
                    sql += " and model.selPeople ='" + selJgdm + "'";
                }
                if (mc != null && !"".equals(mc)){
                    sql += " and model.selDw like '%" + mc + "%'";
                }
                
              /*      if (qzsm.getJgmc() != null && !"".equals(qzsm.getJgmc())) {
                        sql += " and model.jgmc like '%" + qzsm.getJgmc() + "%'";
                    }
                    if (qzsm.getType() != null && !"".equals(qzsm.getType())) {
                        sql += " and model.type ='" + qzsm.getType().trim() + "'";
                    }
                    if (startDate != null) {
                        sql += " and model.createTime >= '" + DateUtil.dateToStr(startDate) + "'";
                    }
                    if (qzsm.getCreateTime() != null) {
                        Date end = DateUtil.dayAfter(qzsm.getCreateTime(), 1);
                        sql += " and model.createTime < '" + DateUtil.dateToStr(end) + "'";
                    }
                    if (qzsm.getCompleTime() != null) {
                        sql += " and model.compleTime >= '" + DateUtil.dateToStr(qzsm.getCompleTime()) + "'";
                    }
                    if (endDate != null) {
                        Date end = DateUtil.dayAfter(endDate, 1);
                        sql += " and model.compleTime < '" + DateUtil.dateToStr(end) + "'";
                    }*/
                
                notList = em.createQuery("select model " + sql + orderBy)
                        .setFirstResult(page.getStartRecord()).setMaxResults(page.getPageSize())
                        .getResultList();
                page.setTotalRecord(((Long) em.createQuery("select count(model) " + sql)
                        .getResultList().get(0)).intValue());
                em.clear();
                currentPath ="/product/jsp/requisition/noteList.jsp";
            }
        }.nSyTemplate();
    }

	
	private String selJgdm;
	
	

    

	public String getSelJgdm() {
		return selJgdm;
	}

	public void setSelJgdm(String selJgdm) {
		this.selJgdm = selJgdm;
	}

	public List<NoticeLog> getNotList() {
		return notList;
	}

	public void setNotList(List<NoticeLog> notList) {
		this.notList = notList;
	}

	public OrgTypeMes getOrgType() {
		return orgType;
	}

	public void setOrgType(OrgTypeMes orgType) {
		this.orgType = orgType;
	}

	public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String getPrompt() {
        return prompt;
    }

    public void setPrompt(String prompt) {
        this.prompt = prompt;
    }

    public Certi getCerti() {
        return certi;
    }

    public void setCerti(Certi certi) {
        this.certi = certi;
    }

    public TCfjlb getCfjl() {
        return cfjl;
    }

    public void setCfjl(TCfjlb cfjl) {
        this.cfjl = cfjl;
    }

    public Map<String, String> getCflxs() {
        return cflxs;
    }

    public void setCflxs(Map<String, String> cflxs) {
        this.cflxs = cflxs;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

	public Map<String, String> getOrgs() {
		return orgs;
	}

	public void setOrgs(Map<String, String> orgs) {
		this.orgs = orgs;
	}

	public String getOrgMes() {
		return orgMes;
	}

	public void setOrgMes(String orgMes) {
		this.orgMes = orgMes;
	}
	
    
}